/*******************************************************************************
 * Copyright 2009, Clark N. Hobbie
 * 
 * This file is part of the CLIPC library.
 * 
 * The CLIPC library is free software; you can redistribute it and/or modify it
 * under the terms of the Lesser GNU General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 * 
 * The CLIPC library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the Lesser GNU General Public
 * License for more details.
 * 
 * You should have received a copy of the Lesser GNU General Public License
 * along with the CLIP library; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 * 
 *******************************************************************************/
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_lts_ipc_fifo_FIFOImpl */

#ifndef _Included_com_lts_ipc_fifo_FIFOImpl
#define _Included_com_lts_ipc_fifo_FIFOImpl
#ifdef __cplusplus
extern "C" {
#endif
#undef com_lts_ipc_fifo_FIFOImpl_DIRECTION_READER
#define com_lts_ipc_fifo_FIFOImpl_DIRECTION_READER 0L
#undef com_lts_ipc_fifo_FIFOImpl_DIRECTION_WRITER
#define com_lts_ipc_fifo_FIFOImpl_DIRECTION_WRITER 1L
#undef com_lts_ipc_fifo_FIFOImpl_BLOCKING_MODE_BLOCKING
#define com_lts_ipc_fifo_FIFOImpl_BLOCKING_MODE_BLOCKING 1L
#undef com_lts_ipc_fifo_FIFOImpl_BLOCKING_MODE_NON_BLOCKING
#define com_lts_ipc_fifo_FIFOImpl_BLOCKING_MODE_NON_BLOCKING 2L
/*
 * Class:     com_lts_ipc_fifo_FIFOImpl
 * Method:    createImpl
 * Signature: (Lcom/lts/ipc/fifo/FIFOResult;)V
 */
JNIEXPORT void JNICALL Java_com_lts_ipc_fifo_FIFOImpl_createImpl
  (JNIEnv *, jobject, jobject);

/*
 * Class:     com_lts_ipc_fifo_FIFOImpl
 * Method:    writeImpl
 * Signature: (Lcom/lts/ipc/fifo/FIFOResult;[BII)V
 */
JNIEXPORT void JNICALL Java_com_lts_ipc_fifo_FIFOImpl_writeImpl
  (JNIEnv *, jobject, jobject, jbyteArray, jint, jint, jint);

/*
 * Class:     com_lts_ipc_fifo_FIFOImpl
 * Method:    readImpl
 * Signature: (Lcom/lts/ipc/fifo/FIFOResult;[BII)V
 */
JNIEXPORT void JNICALL Java_com_lts_ipc_fifo_FIFOImpl_readImpl
  (JNIEnv *, jobject, jobject, jbyteArray, jint, jint, jint);

/*
 * Class:     com_lts_ipc_fifo_FIFOImpl
 * Method:    openImpl
 * Signature: (Lcom/lts/ipc/fifo/FIFOResult;I)V
 */
JNIEXPORT void JNICALL Java_com_lts_ipc_fifo_FIFOImpl_openImpl
  (JNIEnv *, jobject, jobject, jint);

/*
 * Class:     com_lts_ipc_fifo_FIFOImpl
 * Method:    createNonBlocking
 * Signature: (Lcom/lts/ipc/fifo/FIFOResult;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_lts_ipc_fifo_FIFOImpl_createNonBlocking
  (JNIEnv *, jobject, jobject, jstring);

/*
 * Class:     com_lts_ipc_fifo_FIFOImpl
 * Method:    readNonBlocking
 * Signature: (Lcom/lts/ipc/fifo/FIFOResult;[BIII)V
 */
JNIEXPORT void JNICALL Java_com_lts_ipc_fifo_FIFOImpl_readNonBlocking
  (JNIEnv *, jobject, jobject, jbyteArray, jint, jint, jint);

/*
 * Class:     com_lts_ipc_fifo_FIFOImpl
 * Method:    writeNonBlocking
 * Signature: (Lcom/lts/ipc/fifo/FIFOResult;[BIII)V
 */
JNIEXPORT void JNICALL Java_com_lts_ipc_fifo_FIFOImpl_writeNonBlocking
  (JNIEnv *, jobject, jobject, jbyteArray, jint, jint, jint);

/*
 * Class:     com_lts_ipc_fifo_FIFOImpl
 * Method:    toActualName
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_lts_ipc_fifo_FIFOImpl_toActualName
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_lts_ipc_fifo_FIFOImpl
 * Method:    connectNonBlocking
 * Signature: (Lcom/lts/ipc/fifo/FIFOResult;)V
 */
JNIEXPORT void JNICALL Java_com_lts_ipc_fifo_FIFOImpl_connectNonBlocking
  (JNIEnv *, jobject, jobject);

JNIEXPORT void JNICALL Java_com_lts_ipc_fifo_FIFOImpl_select(
		JNIEnv *env,
		jobject this,
		jobject result,
		jint timeoutMsec);

#ifdef __cplusplus
}
#endif
#endif
